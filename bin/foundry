#!/usr/bin/env ruby

unless $:.include?(File.dirname(__FILE__) + '/../lib')
  $:.unshift(File.dirname(__FILE__) + '/../lib')
end

require 'trollop'
require 'foundry'
require 'pp'

opts = Trollop::options do
  version "Foundry Ruby Interpreter/Compiler #{Foundry::VERSION}"
  banner <<-EOS
Usage: foundry [options] filename...

  EOS

  opt :target,  "Target environment",         :default => 'dummy'
  opt :warn,    "Enable or disable warnings", :type => :strings
  opt :feature, "Enable or disable features", :type => :strings
end

class << Foundry::VI::Kernel
  def _trace(scope)
    scope.arguments.each do |arg|
      ::Kernel.p arg
    end
  end
end

class SyntaxError
  def self.from(*args)
    raise SyntaxError, args.inspect
  end
end

runtime = Foundry::Runtime.new
runtime.bootstrap File.join(File.dirname(__FILE__), '../vm')

if ARGV.any?
  ARGV.each do |input|
    if input == '-'
      runtime.eval STDIN.read, '(stdin)'
    else
      runtime.load input
    end
  end
else
  require 'readline'

  puts "Interactive Foundry."

  scope = runtime.create_toplevel_scope
  scope.eval_scope = true

  line  = 1
  while string = Readline.readline("f! ", true)
    p runtime.eval(string, '(if:#{line})', scope)
    line += 1
  end
end