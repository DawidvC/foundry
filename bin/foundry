#!/usr/bin/env ruby

unless $:.include?(File.dirname(__FILE__) + '/../lib')
  $:.unshift(File.dirname(__FILE__) + '/../lib')
end

unless defined?(WARBLER_CONFIG)
  require 'bundler'
  Bundler.setup
end

require 'trollop'
require 'json'
require 'foundry'

opts = Trollop::options do
  version "Foundry Ruby Interpreter/Compiler #{Foundry::VERSION}"
  banner <<-EOS
Usage: foundry [options] filename...

  EOS

  opt :target,     "Target environment",         default: 'dummy'
  opt :evaluate,   "Evaluate code",              type: :strings

  opt :dump_lir,   "Dump LIR",                   default: false,    short: 'I'
  opt :dump_llvm,  "Dump LLVM IR",               default: false,    short: 'L'
  opt :instrument, "Write instrumentation data", type: :string,     short: 'i'
  opt :output,     "Write bitcode",              type: :string

  opt :print_maps, "Print /proc/self/maps",      type: :string
end

if opts[:print_maps]
  File.write(opts[:print_maps], File.read('/proc/self/maps'))
  exit
end

Furnace::SSA::PrettyPrinter.colorize = $stdout.tty?

class StandaloneEvaluator < Foundry::Evaluator::Ruby
  def on_repl(node)
    repl = Foundry::REPL::Shell.new(self.outer)
    repl.invoke!

    Foundry::VI::NIL
  end
end

Foundry::Runtime.interpreter = StandaloneEvaluator

begin
  Foundry::Runtime.bootstrap

  Foundry::Runtime.eval <<-REPL, '(prelude)'
  module Kernel
    def repl!
      FoundryRt.repl
    end
  end
  REPL

  if opts[:evaluate]
    opts[:evaluate].each do |value|
      Foundry::Runtime.eval value, '(-e)'
    end
  end

  if ARGV.any? || opts[:evaluate]
    ARGV.each do |input|
      if input == '-'
        Foundry::Runtime.eval STDIN.read, '(stdin)'
      else
        Foundry::Runtime.load input
      end
    end
  else
    Foundry::Runtime.eval 'repl!', '(prelude)'
  end

  Foundry::Runtime.instrument = !opts[:instrument].nil?
  Foundry::Runtime.graph_lir  = opts[:dump_lir]
  Foundry::Runtime.graph_llvm = opts[:dump_llvm]

  translator = Foundry::Runtime.optimize

  if opts[:instrument]
    File.open(opts[:instrument], 'w') do |io|
      io.write JSON.dump(translator.lir_module.instrumentation)
    end
  end

  if opts[:output] || opts[:dump_llvm]
    Foundry::Runtime.compile(translator)

    if opts[:output]
      File.open(opts[:output], 'w') do |io|
        translator.llvm_module.write_bitcode(io)
      end
    end
  end
rescue Foundry::Evaluator::Error => e
  puts "Unhandled exception:"
  puts e.inner_exception.inspect
  puts e.inner_backtrace
  puts e.backtrace
  exit!
rescue Foundry::LIR::AnalysisError => e
  puts "Analysis error:"
  puts "    #{e}"
end