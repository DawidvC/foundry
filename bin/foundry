#!/usr/bin/env ruby

unless $:.include?(File.dirname(__FILE__) + '/../lib')
  $:.unshift(File.dirname(__FILE__) + '/../lib')
end

require 'trollop'
require 'foundry'
require 'ansi/code'
require 'pp'

opts = Trollop::options do
  version "Foundry Ruby Interpreter/Compiler #{Foundry::VERSION}"
  banner <<-EOS
Usage: foundry [options] filename...

  EOS

  opt :target,  "Target environment",         :default => 'dummy'
  opt :warn,    "Enable or disable warnings", :type => :strings
  opt :feature, "Enable or disable features", :type => :strings

  opt :graph_ast, "Draw AST graphs before executing code", :default => false
end

class << Foundry::VI::Kernel
  def _trace(scope)
    scope.arguments.each do |arg|
      ::Kernel.p arg
    end
  end
end

class SyntaxError
  def self.from(*args)
    raise SyntaxError, args.inspect
  end
end

runtime = Foundry::Runtime.new
runtime.bootstrap File.join(File.dirname(__FILE__), '../vm')

runtime.graph_ast = opts[:graph_ast]

if ARGV.any?
  ARGV.each do |input|
    if input == '-'
      runtime.eval STDIN.read, '(stdin)'
    else
      runtime.load input
    end
  end
else
  require 'readline'

  puts "Interactive Foundry."

  scope = runtime.create_toplevel_scope
  scope.eval_scope = true

  line  = 1
  while string = Readline.readline(ANSI.green { "f! " }, true)
    begin
      p runtime.eval(string, "(repl:#{line})", scope)
    rescue Melbourne::SyntaxError => e
      puts e.message
      puts e.code
      puts "#{"~" * (e.column - 1)}^"
    rescue Foundry::InterpreterError => e
      puts "#{e.class}: #{e.message}"
      puts e.backtrace.map { |line| "  " + line }
    end

    line += 1
  end
end