#!/usr/bin/env ruby

unless $:.include?(File.dirname(__FILE__) + '/../lib')
  $:.unshift(File.dirname(__FILE__) + '/../lib')
end

require 'trollop'
require 'foundry'
require 'pp'

opts = Trollop::options do
  version "Foundry Ruby Interpreter/Compiler #{Foundry::VERSION}"
  banner <<-EOS
Usage: foundry [options] filename...

  EOS

  opt :target,   "Target environment",         :default => 'dummy'
  opt :warn,     "Enable or disable warnings", :type => :strings
  opt :feature,  "Enable or disable features", :type => :strings
  opt :evaluate, "Evaluate code",              :type => :strings
end

module StandalonePrimitives
  include Foundry::Primitives

  def self.eval_repl(interp, scope, args)
    repl = Foundry::REPL.new($runtime, interp)
    repl.invoke!

    Foundry::VI::NIL
  end

  def self.eval_trace(interp, scope, args)
    scope.arguments.each do |arg|
      ::Kernel.p arg
    end

    Foundry::VI::NIL
  end
end

begin
  $runtime = Foundry::Runtime.new
  $runtime.bootstrap File.join(File.dirname(__FILE__), '../vm')

  $runtime.eval <<-REPL, '(prelude)'
  module Kernel
    def repl!
      Foundry.primitive :repl
    end
  end
  REPL

  if opts[:evaluate]
    opts[:evaluate].each do |value|
      $runtime.eval value, '(-e)'
    end
  end

  if ARGV.any? || opts[:evaluate]
    ARGV.each do |input|
      if input == '-'
        $runtime.eval STDIN.read, '(stdin)'
      else
        $runtime.load input
      end
    end
  else
    $runtime.eval 'repl!', '(prelude)'
  end
rescue Foundry::InterpreterError => e
  puts "Unhandled exception:"
  puts e.inner_exception.inspect
  puts e.inner_backtrace
  exit!
end